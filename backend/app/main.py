# =====================================================================
# IMPORTS
# =====================================================================
from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI
from fastapi import FastAPI, HTTPException, Depends, File, UploadFile, Form, Header
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from typing import List
from datetime import date
import hashlib
import smtplib
import zipfile
import tempfile
import os
import shutil
import asyncio
import bibtexparser
import time
import re
import unicodedata
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart


# Local imports
from .database import Base, engine, SessionLocal
from .models import Event, Edition, Article, Author, artigo_autor, User, Notification, EmailLog
from .schemas import (
    EventoCreate, EventoRead, EventoUpdate, 
    EditionCreate, EditionRead, 
    AuthorCreate, AuthorRead, 
    ArticleCreate, ArticleRead, 
    UserCreate, UserRead, LoginRequest, 
    NotificationCreate, NotificationRead, NotificationSettings
)

# =====================================================================
# CONFIGURA√á√ïES
# =====================================================================

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # origem do frontend
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configura√ß√µes de email
EMAIL_CONFIG = {
    "SMTP_SERVER": "smtp.gmail.com",
    "SMTP_PORT": 587,
    "EMAIL_FROM": "dldigitallibrary1@gmail.com",
    "EMAIL_PASSWORD": "rgnk oekd wian uytf",
}

# Configura√ß√µes de autentica√ß√£o
SECRET_KEY = "your-secret-key"
ADMIN_EMAILS = {"luisalcarvalhaes@gmail.com", "outroadmin@email.com"}

# =====================================================================
# FUN√á√ïES UTILIT√ÅRIAS
# =====================================================================

def sha256(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()

def generate_slug(text: str) -> str:
    """Gera um slug amig√°vel a partir de um texto"""
    import re
    import unicodedata
    
    # Normalizar unicode e remover acentos
    text = unicodedata.normalize('NFD', text)
    text = text.encode('ascii', 'ignore').decode('ascii')
    
    # Converter para min√∫sculo
    text = text.lower()
    
    # Substituir espa√ßos e caracteres especiais por h√≠fens
    text = re.sub(r'[^a-z0-9]+', '-', text)
    
    # Remover h√≠fens no in√≠cio e fim
    text = text.strip('-')
    
    # Aumentar limite de tamanho para 100 caracteres
    text = text[:100]
    
    return text

def get_db():
    """Depend√™ncia de sess√£o do banco de dados"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

async def send_notification_email(to_email: str, author_name: str, article_title: str, event_name: str):
    """Fun√ß√£o para enviar email de notifica√ß√£o"""
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_CONFIG["EMAIL_FROM"]
        msg['To'] = to_email
        msg['Subject'] = f"Novo artigo publicado - {article_title}"
        
        body = f"""
        Ol√° {author_name},
        
        Temos o prazer de informar que um novo artigo de sua autoria foi publicado em nossa biblioteca digital:
        
        T√≠tulo: {article_title}
        Evento: {event_name}
        
        Voc√™ pode visualizar o artigo acessando nossa plataforma.
        
        Atenciosamente,
        Equipe da Biblioteca Digital
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Tentar enviar email real se as configura√ß√µes estiverem v√°lidas
        if EMAIL_CONFIG["EMAIL_PASSWORD"] != "your_app_password" and EMAIL_CONFIG["EMAIL_FROM"] != "noreply@digitallibrary.com":
            server = smtplib.SMTP(EMAIL_CONFIG["SMTP_SERVER"], EMAIL_CONFIG["SMTP_PORT"])
            server.starttls()
            server.login(EMAIL_CONFIG["EMAIL_FROM"], EMAIL_CONFIG["EMAIL_PASSWORD"])
            text = msg.as_string()
            server.sendmail(EMAIL_CONFIG["EMAIL_FROM"], to_email, text)
            server.quit()
            print(f"Email real enviado para {to_email} sobre o artigo '{article_title}'")
        else:
            print(f"Email simulado enviado para {to_email} sobre o artigo '{article_title}' (configura√ß√£o n√£o finalizada)")
        
        return True
    except Exception as e:
        print(f"Erro ao enviar email: {str(e)}")
        return False

async def enviar_notificacao_novo_artigo(article_id: int, db: Session):
    """Envia notifica√ß√£o por email quando um novo artigo √© publicado"""
    try:
        print(f"üîî Iniciando notifica√ß√µes para artigo ID: {article_id}")
        
        # Buscar o artigo
        article = db.query(Article).filter(Article.id == article_id).first()
        if not article:
            print(f"‚ùå Artigo {article_id} n√£o encontrado")
            return
        
        print(f"üìÑ Artigo encontrado: {article.titulo}")
        
        # Buscar autores do artigo
        for author in article.authors:
            print(f"üë§ Processando autor: {author.nome} {author.sobrenome} (ID: {author.id})")
            
            # 1. Verificar se o pr√≥prio autor √© um usu√°rio cadastrado
            user_author = db.query(User).filter(
                User.nome.ilike(f"%{author.nome}%"),
                User.receive_notifications == 1
            ).first()
            
            if user_author:
                print(f"‚úÖ Autor √© usu√°rio cadastrado: {user_author.email}")
                
                # Verificar se j√° enviou email para este artigo/usu√°rio (remover para permitir reenvios)
                # Comentando esta verifica√ß√£o para permitir envios
                # email_sent = db.query(EmailLog).filter(
                #     (EmailLog.user_id == user_author.id) & (EmailLog.article_id == article.id)
                # ).first()
                
                # if not email_sent:
                try:
                    print(f"üìß Enviando email para o pr√≥prio autor: {user_author.email}")
                    await send_notification_email(
                        str(user_author.email), 
                        f"{str(author.nome)} {str(author.sobrenome)}", 
                        str(article.titulo), 
                        str(article.edition.event.nome) if article.edition and article.edition.event else "Evento"
                    )
                    
                    # Registrar envio
                    log = EmailLog(
                        user_id=user_author.id,
                        article_id=article.id,
                        author_id=author.id,
                        sent_at=date.today(),
                        email_subject=f"Novo artigo: {str(article.titulo)}",
                        status="sent"
                    )
                    db.add(log)
                    print(f"‚úÖ Email enviado para autor: {user_author.email}")
                    
                except Exception as e:
                    print(f"‚ùå Erro ao enviar email para autor {user_author.email}: {e}")
                    # Registrar falha
                    log = EmailLog(
                        user_id=user_author.id,
                        article_id=article.id,
                        author_id=author.id,
                        sent_at=date.today(),
                        email_subject=f"Novo artigo: {str(article.titulo)}",
                        status="failed"
                    )
                    db.add(log)
            
            # 2. Buscar usu√°rios que seguem este autor
            notifications = db.query(Notification).filter(
                Notification.author_id == author.id,
                Notification.is_active == 1
            ).all()
            
            print(f"üîî Encontradas {len(notifications)} notifica√ß√µes ativas para o autor {author.nome}")
            
            for notification in notifications:
                user = db.query(User).filter(
                    User.id == notification.user_id,
                    User.receive_notifications == 1
                ).first()
                
                if user:
                    print(f"üë§ Usu√°rio seguidor encontrado: {user.nome} ({user.email})")
                    
                    # Verificar se j√° enviou email para este artigo/usu√°rio (remover para permitir reenvios)
                    # Comentando esta verifica√ß√£o para permitir envios
                    # email_sent = db.query(EmailLog).filter(
                    #     (EmailLog.user_id == user.id) & (EmailLog.article_id == article.id)
                    # ).first()
                    
                    # if not email_sent:
                    try:
                        print(f"üìß Enviando email para seguidor: {user.email}")
                        await send_notification_email(
                            str(user.email), 
                            f"{str(author.nome)} {str(author.sobrenome)}", 
                            str(article.titulo), 
                            str(article.edition.event.nome) if article.edition and article.edition.event else "Evento"
                        )
                        
                        # Registrar envio
                        log = EmailLog(
                            user_id=user.id,
                            article_id=article.id,
                            author_id=author.id,
                            sent_at=date.today(),
                            email_subject=f"Novo artigo de {author.nome}: {str(article.titulo)}",
                            status="sent"
                        )
                        db.add(log)
                        print(f"‚úÖ Email enviado para seguidor: {user.email}")
                        
                    except Exception as e:
                        print(f"‚ùå Erro ao enviar email para seguidor {user.email}: {e}")
                        # Registrar falha
                        log = EmailLog(
                            user_id=user.id,
                            article_id=article.id,
                            author_id=author.id,
                            sent_at=date.today(),
                            email_subject=f"Novo artigo de {author.nome}: {str(article.titulo)}",
                            status="failed"
                        )
                        db.add(log)
                else:
                    print(f"‚ùå Usu√°rio ID {notification.user_id} n√£o encontrado ou com notifica√ß√µes desabilitadas")
        
        db.commit()
        print(f"‚úÖ Processamento de notifica√ß√µes conclu√≠do para artigo {article_id}")
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de notifica√ß√£o: {e}")
        import traceback
        traceback.print_exc()


# =====================================================================
# CONFIGURA√á√ÉO DA APLICA√á√ÉO
# =====================================================================

app = FastAPI(title="Digital Library API")

# Criar diret√≥rio uploads e servir arquivos est√°ticos
uploads_dir = os.path.join(os.path.dirname(__file__), "..", "uploads")
os.makedirs(uploads_dir, exist_ok=True)
app.mount("/uploads", StaticFiles(directory=uploads_dir), name="uploads")

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

import time

@app.middleware("http")
async def log_requests(request, call_next):
    start_time = time.time()
    print(f"üöÄ REQUISI√á√ÉO INICIADA: {request.method} {request.url}")
    
    response = await call_next(request)
    
    process_time = time.time() - start_time
    print(f"‚è±Ô∏è REQUISI√á√ÉO FINALIZADA: {request.method} {request.url} - {process_time:.2f}s")
    
    if process_time > 1:  # Log requisi√ß√µes que demoram mais de 1 segundo
        print(f"üêå REQUISI√á√ÉO LENTA: {request.method} {request.url} - {process_time:.2f}s")
    
    response.headers["X-Process-Time"] = str(process_time)
    return response

# Criar tabelas no banco de dados
Base.metadata.create_all(bind=engine)

# =====================================================================
# ENDPOINTS B√ÅSICOS
# =====================================================================

@app.get("/")
def read_root():
    return {"message": "API Digital Library est√° funcionando!"}

@app.options("/{rest_of_path:path}")
async def preflight_handler(rest_of_path: str = ""):
    return JSONResponse(content={"message": "OK"})

# =====================================================================
# ENDPOINTS DE EVENTOS
# =====================================================================

@app.post("/eventos", response_model=EventoRead)
def criar_evento(evento: EventoCreate, db: Session = Depends(get_db)):
    evento_existente = db.query(Event).filter(Event.slug == evento.sigla).first()
    if evento_existente:
        raise HTTPException(
            status_code=400,
            detail="J√° existe um evento com essa sigla registrado no banco de dados"
        )
    # USAR admin_id do payload:
    novo_evento = Event(
        nome=evento.nome, 
        slug=evento.sigla,
        admin_id=evento.admin_id  # MANTER admin_id
    )
    db.add(novo_evento)
    db.commit()
    db.refresh(novo_evento)
    return novo_evento

@app.get("/eventos", response_model=list[EventoRead])
def listar_eventos(db: Session = Depends(get_db)):
    print(f"üîç DEBUG - Iniciando listagem de eventos")
    
    try:
        print(f"üîç DEBUG - Executando query de eventos...")
        eventos = db.query(Event).all()
        print(f"üîç DEBUG - Encontrados {len(eventos)} eventos no banco")
        
        for i, evento in enumerate(eventos):
            print(f"üîç DEBUG - Evento {i+1}: ID={evento.id}, Nome={evento.nome[:50]}{'...' if len(evento.nome) > 50 else ''}")
            print(f"üîç DEBUG - Slug completo: '{evento.slug}' (tamanho: {len(evento.slug)})")
        
        print(f"üîç DEBUG - Retornando {len(eventos)} eventos")
        return eventos
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO ao listar eventos: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/eventos/by-id/{evento_id}", response_model=EventoRead)
def obter_evento_por_id(evento_id: int, db: Session = Depends(get_db)):
    evento = db.query(Event).filter(Event.id == evento_id).first()
    if not evento:
        raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
    return evento

@app.get("/eventos/{slug}", response_model=EventoRead)
def obter_evento_por_slug(slug: str, db: Session = Depends(get_db)):
    evento = db.query(Event).filter(Event.slug == slug).first()
    if not evento:
        raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
    return evento

@app.put("/eventos/{evento_id}", response_model=EventoRead)
def atualizar_evento(evento_id: int, evento_data: dict, db: Session = Depends(get_db)):
    """Atualizar um evento espec√≠fico"""
    try:
        print(f"üîÑ Atualizando evento ID: {evento_id}")
        print(f"üìù Dados recebidos: {evento_data}")
        
        # Buscar evento existente
        evento_db = db.query(Event).filter(Event.id == evento_id).first()
        if not evento_db:
            print(f"‚ùå Evento {evento_id} n√£o encontrado")
            raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
        
        print(f"üìÑ Evento encontrado: {evento_db.nome}")
        
        # Atualizar campos se fornecidos
        if 'nome' in evento_data and evento_data['nome']:
            evento_db.nome = evento_data['nome'].strip()
            print(f"‚úÖ Nome atualizado para: {evento_db.nome}")
        
        if 'sigla' in evento_data and evento_data['sigla']:
            nova_sigla = evento_data['sigla'].strip().lower()
            
            # Verificar se a nova sigla j√° existe em outro evento
            evento_existente = db.query(Event).filter(
                Event.slug == nova_sigla,
                Event.id != evento_id  # Excluir o pr√≥prio evento
            ).first()
            
            if evento_existente:
                raise HTTPException(
                    status_code=400,
                    detail=f"J√° existe outro evento com a sigla '{nova_sigla}'"
                )
            
            evento_db.slug = nova_sigla
            print(f"‚úÖ Sigla atualizada para: {evento_db.slug}")
        
        if 'admin_id' in evento_data and evento_data['admin_id']:
            evento_db.admin_id = evento_data['admin_id']
            print(f"‚úÖ Admin ID atualizado para: {evento_db.admin_id}")
        
        db.commit()
        db.refresh(evento_db)
        
        print(f"‚úÖ Evento {evento_id} atualizado com sucesso")
        return evento_db
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao atualizar evento {evento_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@app.delete("/eventos/{evento_id}")
def deletar_evento(evento_id: int, db: Session = Depends(get_db)):
    """
    Deletar evento apenas se n√£o houver artigos vinculados.
    Verifica se h√° artigos publicados em qualquer edi√ß√£o do evento.
    """
    try:
        print(f"üóëÔ∏è Tentando deletar evento ID: {evento_id}")
        
        # Buscar o evento
        evento_db = db.query(Event).filter(Event.id == evento_id).first()
        if not evento_db:
            print(f"‚ùå Evento {evento_id} n√£o encontrado")
            raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
        
        print(f"üìÖ Evento encontrado: {evento_db.nome}")
        
        # Buscar todas as edi√ß√µes do evento
        edicoes = db.query(Edition).filter(Edition.evento_id == evento_id).all()
        print(f"üìä Encontradas {len(edicoes)} edi√ß√µes vinculadas ao evento")
        
        # Verificar se h√° artigos em qualquer edi√ß√£o deste evento
        total_artigos = 0
        detalhes_edicoes = []
        
        for edicao in edicoes:
            artigos_count = db.query(Article).filter(Article.edicao_id == edicao.id).count()
            total_artigos += artigos_count
            
            if artigos_count > 0:  # S√≥ incluir edi√ß√µes que t√™m artigos
                detalhes_edicoes.append({
                    "ano": edicao.ano,
                    "edicao_id": edicao.id,
                    "artigos": artigos_count
                })
            
            print(f"üìÑ Edi√ß√£o {edicao.ano}: {artigos_count} artigos")
        
        print(f"üìù Total de artigos vinculados ao evento: {total_artigos}")
        
        # Se h√° artigos, impedir exclus√£o
        if total_artigos > 0:
            print(f"‚ùå Exclus√£o impedida: evento tem {total_artigos} artigos")
            
            raise HTTPException(
                status_code=400, 
                detail={
                    "error": "N√£o √© poss√≠vel excluir o evento",
                    "motivo": "H√° artigos cient√≠ficos publicados neste evento",
                    "evento": {
                        "id": evento_db.id,
                        "nome": evento_db.nome,
                        "slug": evento_db.slug
                    },
                    "estatisticas": {
                        "total_edicoes": len(edicoes),
                        "edicoes_com_artigos": len(detalhes_edicoes),
                        "total_artigos": total_artigos
                    },
                    "detalhes_edicoes": detalhes_edicoes,
                    "sugestao": "Para excluir este evento, √© necess√°rio primeiro excluir todos os artigos de suas edi√ß√µes.",
                    "passos_recomendados": [
                        "1. Acesse cada edi√ß√£o do evento no dashboard",
                        "2. Exclua todos os artigos de cada edi√ß√£o",
                        "3. Exclua as edi√ß√µes vazias",
                        "4. Finalmente, exclua o evento"
                    ],
                    "alternativa": "Considere manter o evento para preservar o hist√≥rico cient√≠fico"
                }
            )
        
        # Se n√£o h√° artigos, verificar se h√° edi√ß√µes vazias
        if edicoes:
            print(f"üóëÔ∏è Deletando {len(edicoes)} edi√ß√µes vazias primeiro...")
            for edicao in edicoes:
                db.delete(edicao)
            print(f"‚úÖ Edi√ß√µes vazias deletadas")
        
        # Agora pode deletar o evento
        print(f"üóëÔ∏è Deletando evento sem artigos vinculados...")
        db.delete(evento_db)
        db.commit()
        
        print(f"‚úÖ Evento {evento_id} deletado com sucesso")
        return {
            "message": f"Evento '{evento_db.nome}' deletado com sucesso",
            "detalhes": {
                "evento_deletado": evento_db.nome,
                "edicoes_deletadas": len(edicoes),
                "artigos_preservados": 0
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao deletar evento {evento_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

# =====================================================================
# ENDPOINTS DE EDI√á√ïES
# =====================================================================

@app.post("/edicoes", response_model=EditionRead)
def criar_edicao(edicao_data: dict, db: Session = Depends(get_db)):
    """Criar uma nova edi√ß√£o com todos os campos"""
    try:
        print(f"üÜï Criando nova edi√ß√£o")
        print(f"üìù Dados recebidos: {edicao_data}")
        
        # Verificar campos obrigat√≥rios
        if not edicao_data.get('evento_id'):
            raise HTTPException(status_code=400, detail="evento_id √© obrigat√≥rio")
        if not edicao_data.get('ano'):
            raise HTTPException(status_code=400, detail="ano √© obrigat√≥rio")
        
        evento_id = int(edicao_data['evento_id'])
        ano = int(edicao_data['ano'])
        
        # Verificar se o evento existe
        evento = db.query(Event).filter(Event.id == evento_id).first()
        if not evento:
            raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
        
        # Verificar se j√° existe uma edi√ß√£o para esse evento no mesmo ano
        edicao_existente = db.query(Edition).filter(
            Edition.evento_id == evento_id,
            Edition.ano == ano
        ).first()
        if edicao_existente:
            raise HTTPException(status_code=400, detail="J√° existe uma edi√ß√£o para este evento no ano especificado")
        
        # Gerar slug para a edi√ß√£o
        slug = f"{evento.slug}-{ano}"
        
        # Criar edi√ß√£o com todos os campos
        edicao_db = Edition(
            ano=ano,
            evento_id=evento_id,
            slug=slug,
            descricao=edicao_data.get('descricao', ''),
            data_inicio=edicao_data.get('data_inicio'),
            data_fim=edicao_data.get('data_fim'),
            local=edicao_data.get('local', ''),
            site_url=edicao_data.get('site_url', '')
        )
        
        db.add(edicao_db)
        db.commit()
        db.refresh(edicao_db)
        
        print(f"‚úÖ Edi√ß√£o criada com sucesso: {edicao_db.slug}")
        return edicao_db
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao criar edi√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@app.get("/edicoes", response_model=list[EditionRead])
def listar_edicoes(db: Session = Depends(get_db)):
    return db.query(Edition).all()

@app.get("/edicoes/{edicao_id}", response_model=EditionRead)
def obter_edicao_por_id(edicao_id: int, db: Session = Depends(get_db)):
    """Buscar uma edi√ß√£o espec√≠fica por ID"""
    try:
        print(f"üîç Buscando edi√ß√£o ID: {edicao_id}")
        
        edicao = db.query(Edition).filter(Edition.id == edicao_id).first()
        if not edicao:
            print(f"‚ùå Edi√ß√£o {edicao_id} n√£o encontrada")
            raise HTTPException(status_code=404, detail="Edi√ß√£o n√£o encontrada")
        
        print(f"‚úÖ Edi√ß√£o encontrada: {edicao.ano} (Evento ID: {edicao.evento_id})")
        return edicao
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erro ao buscar edi√ß√£o {edicao_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.put("/edicoes/{edicao_id}", response_model=EditionRead)
def atualizar_edicao(edicao_id: int, edicao_data: dict, db: Session = Depends(get_db)):
    """Atualizar uma edi√ß√£o espec√≠fica"""
    try:
        print(f"üîÑ Atualizando edi√ß√£o ID: {edicao_id}")
        print(f"üìù Dados recebidos: {edicao_data}")
        
        # Buscar edi√ß√£o existente
        edicao_db = db.query(Edition).filter(Edition.id == edicao_id).first()
        if not edicao_db:
            print(f"‚ùå Edi√ß√£o {edicao_id} n√£o encontrada")
            raise HTTPException(status_code=404, detail="Edi√ß√£o n√£o encontrada")
        
        print(f"üìÑ Edi√ß√£o encontrada: {edicao_db.ano} (Evento ID: {edicao_db.evento_id})")
        
        # Atualizar campos se fornecidos
        if 'ano' in edicao_data and edicao_data['ano']:
            novo_ano = int(edicao_data['ano'])
            
            # Verificar se j√° existe uma edi√ß√£o para o mesmo evento no novo ano
            if novo_ano != edicao_db.ano:  # S√≥ verificar se mudou o ano
                edicao_existente = db.query(Edition).filter(
                    Edition.evento_id == edicao_db.evento_id,
                    Edition.ano == novo_ano,
                    Edition.id != edicao_id  # Excluir a pr√≥pria edi√ß√£o
                ).first()
                
                if edicao_existente:
                    raise HTTPException(
                        status_code=400,
                        detail=f"J√° existe uma edi√ß√£o para este evento no ano {novo_ano}"
                    )
            
            edicao_db.ano = novo_ano
            print(f"‚úÖ Ano atualizado para: {edicao_db.ano}")
        
        if 'evento_id' in edicao_data and edicao_data['evento_id']:
            novo_evento_id = int(edicao_data['evento_id'])
            
            # Verificar se o evento existe
            evento = db.query(Event).filter(Event.id == novo_evento_id).first()
            if not evento:
                raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
            
            # Verificar se j√° existe uma edi√ß√£o para o novo evento no mesmo ano
            if novo_evento_id != edicao_db.evento_id:  # S√≥ verificar se mudou o evento
                edicao_existente = db.query(Edition).filter(
                    Edition.evento_id == novo_evento_id,
                    Edition.ano == edicao_db.ano,
                    Edition.id != edicao_id  # Excluir a pr√≥pria edi√ß√£o
                ).first()
                
                if edicao_existente:
                    raise HTTPException(
                        status_code=400,
                        detail=f"J√° existe uma edi√ß√£o para o evento selecionado no ano {edicao_db.ano}"
                    )
            
            edicao_db.evento_id = novo_evento_id
            print(f"‚úÖ Evento ID atualizado para: {edicao_db.evento_id}")
        
        # Atualizar o slug se ano ou evento mudaram
        if 'ano' in edicao_data or 'evento_id' in edicao_data:
            evento = db.query(Event).filter(Event.id == edicao_db.evento_id).first()
            if evento:
                novo_slug = f"{evento.slug}-{edicao_db.ano}"
                edicao_db.slug = novo_slug
                print(f"‚úÖ Slug atualizado para: {edicao_db.slug}")
        
        # Atualizar campos adicionais
        if 'descricao' in edicao_data:
            edicao_db.descricao = edicao_data['descricao'] or ''
            print(f"‚úÖ Descri√ß√£o atualizada")
        
        if 'data_inicio' in edicao_data:
            edicao_db.data_inicio = edicao_data['data_inicio']
            print(f"‚úÖ Data in√≠cio atualizada: {edicao_db.data_inicio}")
        
        if 'data_fim' in edicao_data:
            edicao_db.data_fim = edicao_data['data_fim']
            print(f"‚úÖ Data fim atualizada: {edicao_db.data_fim}")
        
        if 'local' in edicao_data:
            edicao_db.local = edicao_data['local'] or ''
            print(f"‚úÖ Local atualizado: {edicao_db.local}")
        
        if 'site_url' in edicao_data:
            edicao_db.site_url = edicao_data['site_url'] or ''
            print(f"‚úÖ Site URL atualizado: {edicao_db.site_url}")
        
        db.commit()
        db.refresh(edicao_db)
        
        print(f"‚úÖ Edi√ß√£o {edicao_id} atualizada com sucesso")
        return edicao_db
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao atualizar edi√ß√£o {edicao_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@app.delete("/edicoes/{edicao_id}")
def deletar_edicao(edicao_id: int, db: Session = Depends(get_db)):
    edicao_db = db.query(Edition).filter(Edition.id == edicao_id).first()
    if not edicao_db:
        raise HTTPException(status_code=404, detail="Edi√ß√£o n√£o encontrada")
    
    db.delete(edicao_db)
    db.commit()
    return {"message": "Edi√ß√£o deletada com sucesso"}

@app.get("/eventos/{evento_slug}/edicoes")
def listar_edicoes_do_evento(evento_slug: str, db: Session = Depends(get_db)):
    evento = db.query(Event).filter(Event.slug == evento_slug).first()
    if not evento:
        raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
    edicoes = db.query(Edition).filter(Edition.evento_id == evento.id).all()
    return edicoes

@app.get("/eventos/{evento_slug}/{ano}", response_model=EditionRead)
def obter_edicao_por_slug_e_ano(evento_slug: str, ano: int, db: Session = Depends(get_db)):
    """Buscar edi√ß√£o completa por slug do evento e ano"""
    try:
        print(f"üîç Buscando edi√ß√£o: {evento_slug}/{ano}")
        
        evento = db.query(Event).filter(Event.slug == evento_slug).first()
        if not evento:
            print(f"‚ùå Evento '{evento_slug}' n√£o encontrado")
            raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
        
        edicao = db.query(Edition).filter(
            Edition.evento_id == evento.id, 
            Edition.ano == ano
        ).first()
        if not edicao:
            print(f"‚ùå Edi√ß√£o {ano} do evento '{evento_slug}' n√£o encontrada")
            raise HTTPException(status_code=404, detail="Edi√ß√£o n√£o encontrada")
        
        print(f"‚úÖ Edi√ß√£o encontrada: {edicao.slug}")
        print(f"üìä Dados da edi√ß√£o: desc={edicao.descricao}, local={edicao.local}")
        
        return edicao
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erro ao buscar edi√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/eventos/{evento_slug}/{ano}/artigos", response_model=list[ArticleRead])
def listar_artigos_da_edicao(evento_slug: str, ano: int, db: Session = Depends(get_db)):
    evento = db.query(Event).filter(Event.slug == evento_slug).first()
    if not evento:
        raise HTTPException(status_code=404, detail="Evento n√£o encontrado")
    edicao = db.query(Edition).filter(Edition.evento_id == evento.id, Edition.ano == ano).first()
    if not edicao:
        raise HTTPException(status_code=404, detail="Edi√ß√£o n√£o encontrada")
    return db.query(Article).filter(Article.edicao_id == edicao.id).all()

# =====================================================================
# ENDPOINTS DE AUTORES
# =====================================================================

@app.post("/autores", response_model=AuthorRead)
def criar_autor(autor: AuthorCreate, db: Session = Depends(get_db)):
    autor_existente = db.query(Author).filter(
        (Author.nome == autor.nome) & (Author.sobrenome == autor.sobrenome)
    ).first()
    if autor_existente:
        raise HTTPException(
            status_code=400,
            detail="Um autor de mesmo nome j√° est√° inserido no banco de dados"
        )
    
    # Gerar slug amig√°vel para o autor
    slug_base = f"{autor.nome.lower()}-{autor.sobrenome.lower()}"
    slug_base = slug_base.replace(" ", "-").replace(".", "").replace(",", "")
    
    # Verificar se o slug j√° existe e adicionar n√∫mero se necess√°rio
    slug = slug_base
    contador = 1
    while db.query(Author).filter(Author.slug == slug).first():
        slug = f"{slug_base}-{contador}"
        contador += 1
    
    novo_autor = Author(nome=autor.nome, sobrenome=autor.sobrenome, slug=slug)
    db.add(novo_autor)
    db.commit()
    db.refresh(novo_autor)
    return novo_autor

@app.get("/autores", response_model=list[AuthorRead])
def listar_autores(db: Session = Depends(get_db)):
    return db.query(Author).all()

@app.get("/autores/{slug}", response_model=AuthorRead)
def obter_autor_por_slug(slug: str, db: Session = Depends(get_db)):
    autor = db.query(Author).filter(Author.slug == slug).first()
    if not autor:
        raise HTTPException(status_code=404, detail="Autor n√£o encontrado")
    return autor

@app.get("/autores/{slug}/artigos")
def listar_artigos_do_autor(slug: str, db: Session = Depends(get_db)):
    autor = db.query(Author).filter(Author.slug == slug).first()
    if not autor:
        raise HTTPException(status_code=404, detail="Autor n√£o encontrado")
    
    # Buscar artigos do autor com informa√ß√µes das edi√ß√µes e eventos
    artigos = db.query(Article).join(Article.authors).filter(Author.slug == slug).all()
    
    # Organizar artigos por ano
    artigos_por_ano = {}
    for artigo in artigos:
        if artigo.edition and artigo.edition.ano:
            ano = artigo.edition.ano
            if ano not in artigos_por_ano:
                artigos_por_ano[ano] = []
            artigos_por_ano[ano].append(artigo)
    
    return {
        "autor": autor,
        "artigos_por_ano": artigos_por_ano,
        "total_artigos": len(artigos)
    }

# =====================================================================
# ENDPOINTS DE ARTIGOS
# =====================================================================

@app.post("/artigos", response_model=ArticleRead)
async def create_artigo(
    titulo: str = Form(...),
    area: str = Form(None),
    palavras_chave: str = Form(None),
    edicao_id: int = Form(...),
    autores: str = Form(...),  # JSON string com lista de autores
    pdf_file: UploadFile = File(None),
    db: Session = Depends(get_db)
):
    try:
        # Parse da lista de autores
        import json
        autores_data = json.loads(autores)
        
        # Processar upload do PDF se fornecido
        pdf_path = None
        if pdf_file and pdf_file.filename:
            # Criar nome √∫nico para o arquivo
            timestamp = str(int(time.time()))
            file_extension = os.path.splitext(pdf_file.filename)[1]
            unique_filename = f"{timestamp}_{pdf_file.filename}"
            
            # Salvar arquivo
            uploads_dir = os.path.join(os.path.dirname(__file__), "..", "uploads")
            os.makedirs(uploads_dir, exist_ok=True)
            file_path = os.path.join(uploads_dir, unique_filename)
            
            with open(file_path, "wb") as buffer:
                shutil.copyfileobj(pdf_file.file, buffer)
            
            pdf_path = f"/uploads/{unique_filename}"
        
        # Criar o artigo
        db_artigo = Article(
            titulo=titulo,
            pdf_path=pdf_path,
            area=area,
            palavras_chave=palavras_chave,
            edicao_id=edicao_id
        )
        db.add(db_artigo)
        db.flush()  # Para obter o ID do artigo
        
        # Processar autores
        for autor_data in autores_data:
            nome = autor_data.get('nome', '').strip()
            sobrenome = autor_data.get('sobrenome', '').strip()
            
            if not nome or not sobrenome:
                continue
            
            # CORRE√á√ÉO: Procurar autor existente em vez de impedir reutiliza√ß√£o
            existing_author = db.query(Author).filter(
                Author.nome == nome,
                Author.sobrenome == sobrenome
            ).first()
            
            if existing_author:
                # Usar autor existente
                autor_id = existing_author.id
                print(f"Reutilizando autor existente: {nome} {sobrenome} (ID: {autor_id})")
            else:
                # Criar novo autor
                slug = generate_slug(f"{nome} {sobrenome}")
                
                # Verificar se o slug j√° existe e torn√°-lo √∫nico
                base_slug = slug
                counter = 1
                while db.query(Author).filter(Author.slug == slug).first():
                    slug = f"{base_slug}-{counter}"
                    counter += 1
                
                new_author = Author(
                    nome=nome,
                    sobrenome=sobrenome,
                    slug=slug
                )
                db.add(new_author)
                db.flush()
                autor_id = new_author.id
                print(f"Criado novo autor: {nome} {sobrenome} (ID: {autor_id})")
            
            # Verificar se a associa√ß√£o j√° existe para evitar duplicatas
            existing_association = db.query(artigo_autor).filter(
                artigo_autor.c.artigo_id == db_artigo.id,
                artigo_autor.c.autor_id == autor_id
            ).first()
            
            if not existing_association:
                # Criar associa√ß√£o artigo-autor
                association = artigo_autor.insert().values(
                    artigo_id=db_artigo.id,
                    autor_id=autor_id
                )
                db.execute(association)
                print(f"Associa√ß√£o criada: Artigo {db_artigo.id} <-> Autor {autor_id}")
        
        db.commit()
        
        # Buscar o artigo completo com autores
        artigo_completo = db.query(Article).filter(Article.id == db_artigo.id).first()
        
        # Enviar notifica√ß√µes para usu√°rios que seguem os autores
        try:
            await enviar_notificacao_novo_artigo(db_artigo.id, db)
        except Exception as e:
            print(f"Erro ao enviar notifica√ß√µes: {e}")
            # N√£o falhar a cria√ß√£o do artigo por causa de erro de notifica√ß√£o
        
        return artigo_completo
        
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Formato inv√°lido de dados dos autores")
    except Exception as e:
        db.rollback()
        print(f"Erro ao criar artigo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")


@app.get("/artigos", response_model=list[ArticleRead])
def listar_artigos(autor_id: int | None = None, db: Session = Depends(get_db)):
    print(f"üîç DEBUG - Iniciando listagem de artigos, autor_id: {autor_id}")
    
    try:
        query = db.query(Article)
        if autor_id:
            query = query.join(Article.authors).filter(Author.id == autor_id)
        
        print(f"üîç DEBUG - Executando query...")
        artigos = query.all()
        print(f"üîç DEBUG - Encontrados {len(artigos)} artigos no banco")
        
        # Criar resposta manual para evitar problemas de serializa√ß√£o
        result = []
        for i, artigo in enumerate(artigos):
            print(f"üîç DEBUG - Processando artigo {i+1}: ID={artigo.id}, T√≠tulo={artigo.titulo}")
            
            try:
                authors_list = []
                print(f"üîç DEBUG - Carregando autores do artigo {artigo.id}...")
                for j, author in enumerate(artigo.authors):
                    print(f"üîç DEBUG - Autor {j+1}: {author.nome} {author.sobrenome}")
                    authors_list.append({
                        "id": author.id,
                        "nome": author.nome,
                        "sobrenome": author.sobrenome,
                        "slug": author.slug
                    })
                
                article_data = {
                    "id": artigo.id,
                    "titulo": artigo.titulo,
                    "resumo": artigo.resumo,
                    "area": artigo.area,
                    "palavras_chave": artigo.palavras_chave,
                    "pdf_path": artigo.pdf_path,
                    "data_publicacao": str(artigo.data_publicacao) if artigo.data_publicacao else None,
                    "edicao_id": artigo.edicao_id,
                    "authors": authors_list
                }
                
                result.append(article_data)
                print(f"‚úÖ DEBUG - Artigo {i+1} processado com sucesso")
                
            except Exception as e:
                print(f"‚ùå DEBUG - Erro ao processar artigo {artigo.id}: {e}")
                continue
        
        print(f"üîç DEBUG - Retornando {len(result)} artigos processados")
        return result
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO ao listar artigos: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/artigos/{artigo_id}", response_model=ArticleRead)
def obter_artigo(artigo_id: int, db: Session = Depends(get_db)):
    artigo = db.query(Article).filter(Article.id == artigo_id).first()
    if not artigo:
        raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
    return artigo

@app.put("/artigos/{artigo_id}", response_model=ArticleRead)
async def atualizar_artigo(artigo_id: int, artigo: ArticleCreate, db: Session = Depends(get_db)):
    artigo_existente = db.query(Article).filter(Article.id == artigo_id).first()
    if not artigo_existente:
        raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
    
    # Atualizar dados do artigo
    artigo_existente.titulo = artigo.titulo
    artigo_existente.pdf_path = artigo.pdf_path
    artigo_existente.area = artigo.area
    artigo_existente.palavras_chave = artigo.palavras_chave
    artigo_existente.edicao_id = artigo.edicao_id
    
    # Atualizar autores
    if artigo.author_ids:
        autores = db.query(Author).filter(Author.id.in_(artigo.author_ids)).all()
        artigo_existente.authors = autores
    else:
        artigo_existente.authors = []
    
    db.commit()
    db.refresh(artigo_existente)
    return artigo_existente

@app.put("/artigos/{artigo_id}/form")
async def atualizar_artigo_form(
    artigo_id: int,
    titulo: str = Form(...),
    area: str = Form(None),
    palavras_chave: str = Form(None),
    edicao_id: int = Form(...),
    autores: str = Form(...),
    pdf_file: UploadFile = File(None),
    db: Session = Depends(get_db)
):
    """Endpoint espec√≠fico para atualizar artigo via FormData"""
    try:
        print(f"üîÑ Atualizando artigo ID: {artigo_id}")
        
        # Buscar artigo existente
        artigo_existente = db.query(Article).filter(Article.id == artigo_id).first()
        if not artigo_existente:
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        # Parse da lista de autores
        import json
        autores_data = json.loads(autores)
        
        # Processar upload do PDF se fornecido
        pdf_path = artigo_existente.pdf_path  # Manter o PDF existente se n√£o houver novo
        if pdf_file and pdf_file.filename:
            # Criar nome √∫nico para o arquivo
            timestamp = str(int(time.time()))
            file_extension = os.path.splitext(pdf_file.filename)[1]
            unique_filename = f"{timestamp}_{pdf_file.filename}"
            
            # Salvar arquivo
            uploads_dir = os.path.join(os.path.dirname(__file__), "..", "uploads")
            os.makedirs(uploads_dir, exist_ok=True)
            file_path = os.path.join(uploads_dir, unique_filename)
            
            with open(file_path, "wb") as buffer:
                shutil.copyfileobj(pdf_file.file, buffer)
            
            pdf_path = f"/uploads/{unique_filename}"
        
        # Atualizar dados do artigo
        artigo_existente.titulo = titulo
        artigo_existente.area = area
        artigo_existente.palavras_chave = palavras_chave
        artigo_existente.edicao_id = edicao_id
        artigo_existente.pdf_path = pdf_path
        
        # Limpar autores existentes
        artigo_existente.authors = []
        db.flush()
        
        # Processar novos autores
        for autor_data in autores_data:
            nome = autor_data.get('nome', '').strip()
            sobrenome = autor_data.get('sobrenome', '').strip()
            
            if not nome or not sobrenome:
                continue
            
            # Procurar autor existente
            existing_author = db.query(Author).filter(
                Author.nome == nome,
                Author.sobrenome == sobrenome
            ).first()
            
            if existing_author:
                artigo_existente.authors.append(existing_author)
                print(f"Reutilizando autor existente: {nome} {sobrenome}")
            else:
                # Criar novo autor
                slug = generate_slug(f"{nome} {sobrenome}")
                
                # Verificar se o slug j√° existe e torn√°-lo √∫nico
                base_slug = slug
                counter = 1
                while db.query(Author).filter(Author.slug == slug).first():
                    slug = f"{base_slug}-{counter}"
                    counter += 1
                
                new_author = Author(
                    nome=nome,
                    sobrenome=sobrenome,
                    slug=slug
                )
                db.add(new_author)
                db.flush()
                artigo_existente.authors.append(new_author)
                print(f"Criado novo autor: {nome} {sobrenome}")
        
        db.commit()
        db.refresh(artigo_existente)
        
        print(f"‚úÖ Artigo {artigo_id} atualizado com sucesso")
        return artigo_existente
        
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Formato inv√°lido de dados dos autores")
    except Exception as e:
        db.rollback()
        print(f"Erro ao atualizar artigo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@app.delete("/artigos/{artigo_id}")
def deletar_artigo(artigo_id: int, db: Session = Depends(get_db)):
    """Deletar um artigo espec√≠fico"""
    try:
        print(f"üóëÔ∏è Tentando deletar artigo ID: {artigo_id}")
        
        # Buscar o artigo
        artigo_db = db.query(Article).filter(Article.id == artigo_id).first()
        if not artigo_db:
            print(f"‚ùå Artigo {artigo_id} n√£o encontrado")
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        print(f"üìÑ Artigo encontrado: {artigo_db.titulo}")
        
        # Deletar arquivo PDF se existir
        if artigo_db.pdf_path:
            try:
                # Remover "/uploads/" do in√≠cio do path
                filename = artigo_db.pdf_path.replace("/uploads/", "")
                uploads_dir = os.path.join(os.path.dirname(__file__), "..", "uploads")
                file_path = os.path.join(uploads_dir, filename)
                
                if os.path.exists(file_path):
                    os.remove(file_path)
                    print(f"üóëÔ∏è Arquivo PDF deletado: {file_path}")
                else:
                    print(f"‚ö†Ô∏è Arquivo PDF n√£o encontrado: {file_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao deletar arquivo PDF: {e}")
                # Continuar mesmo se n√£o conseguir deletar o arquivo
        
        # As associa√ß√µes artigo-autor ser√£o deletadas automaticamente devido ao CASCADE
        # definido no relacionamento SQLAlchemy
        
        # Deletar logs de email relacionados
        db.query(EmailLog).filter(EmailLog.article_id == artigo_id).delete()
        print(f"üóëÔ∏è Logs de email deletados para artigo {artigo_id}")
        
        # Deletar o artigo
        db.delete(artigo_db)
        db.commit()
        
        print(f"‚úÖ Artigo {artigo_id} deletado com sucesso")
        return {"message": "Artigo deletado com sucesso"}
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao deletar artigo {artigo_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

# =====================================================================
# ENDPOINTS DE UPLOAD
# =====================================================================

@app.post("/upload-pdf")
async def upload_pdf(file: UploadFile = File(...)):
    if not file.filename or not file.filename.endswith('.pdf'):
        raise HTTPException(status_code=400, detail="Apenas arquivos PDF s√£o permitidos")
    
    # Criar diret√≥rio uploads se n√£o existir
    upload_dir = os.path.join(os.path.dirname(__file__), "..", "uploads")
    os.makedirs(upload_dir, exist_ok=True)
    
    # Salvar arquivo
    file_path = os.path.join(upload_dir, file.filename)
    
    try:
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        # Retornar URL completa do arquivo para acesso via web
        file_url = f"/uploads/{file.filename}"
        return {"message": "Upload realizado com sucesso", "file_path": file_url}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao salvar arquivo: {str(e)}")

# REMOVA os dois endpoints existentes e substitua por este:

@app.post("/upload-bibtex")
async def upload_bibtex(
    bibtex_file: UploadFile = File(...),
    pdf_zip: UploadFile = File(None),
    action: str = Form("preview"),
    authorization: str = Header(None),  # MUDAN√áA: Header em vez de Form
    db: Session = Depends(get_db)
):
    """
    Endpoint unificado para BibTeX:
    - action="preview": Retorna preview dos artigos (sem salvar)
    - action="save": Salva automaticamente (com ou sem PDFs)
    """
    
    if not bibtex_file.filename.endswith(('.bib', '.bibtex')):
        raise HTTPException(status_code=400, detail="Apenas arquivos .bib ou .bibtex s√£o permitidos")
    
    if pdf_zip and not pdf_zip.filename.endswith('.zip'):
        raise HTTPException(status_code=400, detail="Arquivo ZIP deve ter extens√£o .zip")
    
    # Verificar se usu√°rio est√° logado e √© admin (para action="save")
    current_user = None
    if action == "save":
        if not authorization:
            raise HTTPException(status_code=401, detail="Necess√°rio estar logado como admin para salvar artigos")
        
        current_user = get_current_user_from_token(authorization, db)
        if not current_user:
            raise HTTPException(status_code=401, detail="Token inv√°lido")
        
        if current_user.perfil != "admin":
            raise HTTPException(status_code=403, detail="Apenas administradores podem salvar artigos via BibTeX")
    
    try:
        # Ler e processar BibTeX
        bibtex_content = await bibtex_file.read()
        bibtex_str = bibtex_content.decode('utf-8')
        bib_database = bibtexparser.loads(bibtex_str)
        
        # Se √© apenas preview
        if action == "preview":
            articles_preview = []
            
            for entry in bib_database.entries:
                article_data = {
                    "titulo": entry.get('title', '').replace('{', '').replace('}', ''),
                    "area": entry.get('keywords', '') or entry.get('subject', ''),
                    "palavras_chave": entry.get('keywords', ''),
                    "resumo": entry.get('abstract', ''),
                    "doi": entry.get('doi', ''),
                    "categoria": entry.get('type', entry.get('ENTRYTYPE', '')),
                    "data_publicacao": entry.get('year', ''),
                    "bibtex_key": entry.get('ID', ''),
                    "booktitle": entry.get('booktitle', ''),
                    "authors": []
                }
                
                # Processar autores
                if 'author' in entry:
                    authors_str = entry['author']
                    author_names = [name.strip() for name in authors_str.split(' and ')]
                    
                    for author_name in author_names:
                        if ',' in author_name:
                            parts = author_name.split(',', 1)
                            sobrenome = parts[0].strip()
                            nome = parts[1].strip() if len(parts) > 1 else ""
                        else:
                            parts = author_name.strip().split()
                            if len(parts) > 1:
                                nome = ' '.join(parts[:-1])
                                sobrenome = parts[-1]
                            else:
                                nome = parts[0] if parts else ""
                                sobrenome = ""
                        
                        article_data["authors"].append({
                            "nome": nome,
                            "sobrenome": sobrenome
                        })
                
                articles_preview.append(article_data)
            
            return {
                "message": f"Arquivo processado com sucesso. Encontrados {len(articles_preview)} artigos.",
                "articles": articles_preview,
                "total": len(articles_preview)
            }
        
        # Se √© para salvar automaticamente
        elif action == "save":
            relatorio = {
                "processados": 0,
                "cadastrados": 0,
                "pulados": [],
                "erros": [],
                "edicoes_criadas": []
            }
            
            # Processar PDFs se fornecidos
            pdf_files = {}
            if pdf_zip:
                with tempfile.TemporaryDirectory() as temp_dir:
                    zip_path = os.path.join(temp_dir, "pdfs.zip")
                    with open(zip_path, "wb") as f:
                        f.write(await pdf_zip.read())
                    
                    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                        for file_info in zip_ref.infolist():
                            if file_info.filename.endswith('.pdf'):
                                pdf_name = os.path.splitext(file_info.filename)[0]
                                pdf_content = zip_ref.read(file_info.filename)
                                pdf_files[pdf_name] = pdf_content
            
            # Processar cada entrada
            for entry in bib_database.entries:
                relatorio["processados"] += 1
                entry_id = entry.get('ID', f'entry_{relatorio["processados"]}')
                
                try:
                    # Validar campos obrigat√≥rios
                    campos_obrigatorios = ['title', 'author']
                    if pdf_files:  # Se tem PDFs, exigir booktitle e year
                        campos_obrigatorios.extend(['booktitle', 'year'])
                    
                    campos_faltando = [campo for campo in campos_obrigatorios if not entry.get(campo)]
                    
                    if campos_faltando:
                        relatorio["pulados"].append({
                            "id": entry_id,
                            "motivo": f"Campos obrigat√≥rios faltando: {', '.join(campos_faltando)}"
                        })
                        continue
                    
                    # Se tem PDFs, verificar se existe correspondente
                    if pdf_files and entry_id not in pdf_files:
                        relatorio["pulados"].append({
                            "id": entry_id,
                            "motivo": f"PDF n√£o encontrado: {entry_id}.pdf"
                        })
                        continue
                    
                    # Identificar ou criar evento e edi√ß√£o automaticamente
                    edicao_id = None
                    
                    if entry.get('booktitle') and entry.get('year'):
                        booktitle = entry['booktitle']
                        year = int(entry['year'])
                        
                        # Tentar encontrar evento pelo booktitle (busca flex√≠vel)
                        evento = db.query(Event).filter(
                            Event.nome.ilike(f"%{booktitle}%")
                        ).first()
                        
                        if not evento:
                            # Criar evento baseado no booktitle
                            # Gerar slug do evento
                            import re
                            slug_evento = re.sub(r'[^a-zA-Z0-9]', '-', booktitle.lower())
                            slug_evento = re.sub(r'-+', '-', slug_evento).strip('-')[:50]
                            
                            # Garantir slug √∫nico
                            contador = 1
                            slug_original = slug_evento
                            while db.query(Event).filter(Event.slug == slug_evento).first():
                                slug_evento = f"{slug_original}-{contador}"
                                contador += 1
                            
                            # USAR O ID DO USU√ÅRIO LOGADO COMO ADMIN
                            evento = Event(
                                nome=booktitle,
                                slug=slug_evento,
                                admin_id=current_user.id  # Usar o ID do usu√°rio logado
                            )
                            db.add(evento)
                            db.flush()
                            relatorio["edicoes_criadas"].append(f"Evento: {booktitle}")
                        
                        # Buscar ou criar edi√ß√£o
                        edicao = db.query(Edition).filter(
                            Edition.evento_id == evento.id,
                            Edition.ano == year
                        ).first()
                        
                        if not edicao:
                            # Criar edi√ß√£o
                            slug_edicao = f"{evento.slug}-{year}"
                            edicao = Edition(
                                ano=year,
                                evento_id=evento.id,
                                slug=slug_edicao
                            )
                            db.add(edicao)
                            db.flush()
                            relatorio["edicoes_criadas"].append(f"Edi√ß√£o: {booktitle} {year}")
                        
                        edicao_id = edicao.id
                    else:
                        # Se n√£o tem booktitle/year, usar primeira edi√ß√£o dispon√≠vel
                        edicao_default = db.query(Edition).first()
                        if edicao_default:
                            edicao_id = edicao_default.id
                        else:
                            relatorio["pulados"].append({
                                "id": entry_id,
                                "motivo": "Nenhuma edi√ß√£o dispon√≠vel no sistema e sem booktitle/year para criar nova"
                            })
                            continue
                    
                    # Verificar duplicatas
                    titulo = entry['title'].replace('{', '').replace('}', '')
                    artigo_existente = db.query(Article).filter(
                        Article.titulo == titulo,
                        Article.edicao_id == edicao_id
                    ).first()
                    
                    if artigo_existente:
                        relatorio["pulados"].append({
                            "id": entry_id,
                            "motivo": "Artigo j√° existe nesta edi√ß√£o"
                        })
                        continue
                    
                    # Processar autores
                    author_ids = []
                    authors_str = entry['author']
                    author_names = [name.strip() for name in authors_str.split(' and ')]
                    
                    for author_name in author_names:
                        if ',' in author_name:
                            parts = author_name.split(',', 1)
                            sobrenome = parts[0].strip()
                            nome = parts[1].strip() if len(parts) > 1 else ""
                        else:
                            parts = author_name.strip().split()
                            if len(parts) > 1:
                                nome = ' '.join(parts[:-1])
                                sobrenome = parts[-1]
                            else:
                                nome = parts[0] if parts else ""
                                sobrenome = ""
                        
                        # Buscar ou criar autor
                        autor_existente = db.query(Author).filter(
                            Author.nome == nome,
                            Author.sobrenome == sobrenome
                        ).first()
                        
                        if not autor_existente:
                            slug = f"{nome.lower()}-{sobrenome.lower()}"
                            autor_slug = slug
                            contador = 1
                            while db.query(Author).filter(Author.slug == autor_slug).first():
                                autor_slug = f"{slug}-{contador}"
                                contador += 1
                            
                            novo_autor = Author(nome=nome, sobrenome=sobrenome, slug=autor_slug)
                            db.add(novo_autor)
                            db.flush()
                            author_ids.append(novo_autor.id)
                        else:
                            author_ids.append(autor_existente.id)
                    
                    # Salvar PDF se existe
                    pdf_path_final = None
                    if entry_id in pdf_files:
                        pdf_filename = f"{entry_id}.pdf"
                        pdf_path_final = f"/uploads/{pdf_filename}"
                        
                        full_pdf_path = os.path.join(uploads_dir, pdf_filename)
                        with open(full_pdf_path, "wb") as pdf_file:
                            pdf_file.write(pdf_files[entry_id])
                    
                    # Criar artigo
                    novo_artigo = Article(
                        titulo=titulo,
                        resumo=entry.get('abstract', ''),
                        area=entry.get('keywords', '') or entry.get('subject', ''),
                        palavras_chave=entry.get('keywords', ''),
                        pdf_path=pdf_path_final,
                        edicao_id=edicao_id
                    )
                    
                    db.add(novo_artigo)
                    db.flush()
                    
                    # Associar autores
                    for author_id in author_ids:
                        db.execute(
                            artigo_autor.insert().values(
                                artigo_id=novo_artigo.id,
                                autor_id=author_id
                            )
                        )
                    
                    relatorio["cadastrados"] += 1
                    
                    # Enviar notifica√ß√µes
                    await enviar_notificacao_novo_artigo(novo_artigo.id, db)
                    
                except Exception as e:
                    relatorio["erros"].append({
                        "id": entry_id,
                        "erro": str(e)
                    })
                    db.rollback()
                    continue
            
            db.commit()
            
            return {
                "message": "Processamento conclu√≠do",
                "relatorio": relatorio
            }
        
        else:
            raise HTTPException(status_code=400, detail="A√ß√£o inv√°lida. Use 'preview' ou 'save'")
    
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Erro no processamento: {str(e)}")

# =====================================================================
# ENDPOINTS DE AUTENTICA√á√ÉO
# =====================================================================

@app.post("/api/auth/register")
def register(user: UserCreate, db: Session = Depends(get_db)):
    try:
        # Verificar se o email j√° existe
        existing_user = db.query(User).filter(User.email == str(user.email)).first()
        if existing_user:
            raise HTTPException(status_code=409, detail="E-mail j√° cadastrado")

        hashed = sha256(user.senha_hash)
        # Usa o perfil enviado pelo frontend, se for 'admin' ou 'usuario'
        perfil = user.perfil if hasattr(user, 'perfil') and user.perfil in ["admin", "usuario"] else "usuario"
        
        # Usar o campo receive_notifications se fornecido, sen√£o usar True como padr√£o
        receive_notifications = getattr(user, 'receive_notifications', True)
        
        new_user = User(
            nome=user.nome, 
            email=str(user.email), 
            senha_hash=hashed, 
            perfil=perfil,
            receive_notifications=1 if receive_notifications else 0
        )

        db.add(new_user)
        db.commit()
        db.refresh(new_user)

        return {"message": "Usu√°rio registrado com sucesso", "user": {
            "id": new_user.id,
            "nome": new_user.nome,
            "email": str(new_user.email),
            "perfil": new_user.perfil,
            "receive_notifications": bool(new_user.receive_notifications)
        }}
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.post("/api/auth/login")
def login(data: LoginRequest, db: Session = Depends(get_db)):
    email = data.email
    password = data.password

    user = db.query(User).filter(User.email == email).first()
    if not user:
        raise HTTPException(status_code=401, detail="Credenciais inv√°lidas")
    
    if str(user.senha_hash) != sha256(password):
        raise HTTPException(status_code=401, detail="Credenciais inv√°lidas")

    # Gera um token simples
    try:
        token = f"user_{user.id}_{sha256(str(user.id) + SECRET_KEY)}"
        return {"token": token, "user": {
            "id": user.id,
            "nome": user.nome,
            "email": str(user.email),
            "perfil": user.perfil
        }}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao gerar token: {str(e)}")

# =====================================================================
# ENDPOINTS DE NOTIFICA√á√ïES
# =====================================================================

@app.put("/usuarios/{user_id}/notificacoes")
def atualizar_preferencias_notificacao(user_id: int, request: dict, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    
    receber_notificacoes = request.get("receber_notificacoes", True)
    
    # Atualizar no banco de dados
    db.query(User).filter(User.id == user_id).update({
        "receive_notifications": 1 if receber_notificacoes else 0
    })
    db.commit()
    
    return {
        "message": "Prefer√™ncias de notifica√ß√£o atualizadas com sucesso",
        "user_id": user_id,
        "receber_notificacoes": receber_notificacoes
    }

@app.get("/usuarios/{user_id}/notificacoes")
def obter_preferencias_notificacao(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    
    return {
        "user_id": user_id,
        "receber_notificacoes": bool(user.receive_notifications)
    }

@app.post("/usuarios/{user_id}/seguir-autor/{author_id}")
def seguir_autor(user_id: int, author_id: int, db: Session = Depends(get_db)):
    # Verificar se usu√°rio existe
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    
    # Verificar se autor existe
    author = db.query(Author).filter(Author.id == author_id).first()
    if not author:
        raise HTTPException(status_code=404, detail="Autor n√£o encontrado")
    
    # Verificar se j√° segue o autor
    existing = db.query(Notification).filter(
        (Notification.user_id == user_id) & (Notification.author_id == author_id)
    ).first()
    
    if existing:
        # Reativar se estava desativado
        db.query(Notification).filter(
            (Notification.user_id == user_id) & (Notification.author_id == author_id)
        ).update({"is_active": 1})
        db.commit()
        return {"message": f"Voc√™ voltou a seguir {author.nome} {author.sobrenome}"}
    
    # Criar nova notifica√ß√£o
    notification = Notification(
        user_id=user_id,
        author_id=author_id,
        is_active=1,
        created_at=date.today()
    )
    db.add(notification)
    db.commit()
    
    return {"message": f"Agora voc√™ segue {author.nome} {author.sobrenome} e receber√° emails quando ele publicar novos artigos!"}

@app.delete("/usuarios/{user_id}/seguir-autor/{author_id}")
def parar_de_seguir_autor(user_id: int, author_id: int, db: Session = Depends(get_db)):
    notification = db.query(Notification).filter(
        (Notification.user_id == user_id) & (Notification.author_id == author_id)
    ).first()
    
    if not notification:
        raise HTTPException(status_code=404, detail="Voc√™ n√£o segue este autor")
    
    author = db.query(Author).filter(Author.id == author_id).first()
    if not author:
        raise HTTPException(status_code=404, detail="Autor n√£o encontrado")
    
    # Update usando database update ao inv√©s de atribui√ß√£o de atributo
    db.query(Notification).filter(
        (Notification.user_id == user_id) & (Notification.author_id == author_id)
    ).update({"is_active": 0})
    db.commit()
    
    return {"message": f"Voc√™ parou de seguir {author.nome} {author.sobrenome}"}

@app.post("/seguir-autor")
def seguir_autor_auth(request: dict, authorization: str = Header(None), db: Session = Depends(get_db)):
    # CORRE√á√ÉO: Usar usu√°rio logado em vez de fixo
    if not authorization:
        raise HTTPException(status_code=401, detail="Token de autentica√ß√£o necess√°rio")
    
    current_user = get_current_user_from_token(authorization, db)
    if not current_user:
        raise HTTPException(status_code=401, detail="Token inv√°lido")
    
    user_id = current_user.id  # Usar ID do usu√°rio logado
    author_id = request.get("autor_id")
    acao = request.get("acao")  # "seguir" ou "parar_seguir"
    
    print(f"üîî Usu√°rio {user_id} ({current_user.nome}) quer {acao} autor {author_id}")
    
    if not author_id or not acao:
        raise HTTPException(
            status_code=400, 
            detail="√â necess√°rio informar autor_id e acao"
        )
    
    # Verificar se o autor existe
    author = db.query(Author).filter(Author.id == author_id).first()
    if not author:
        raise HTTPException(status_code=404, detail="Autor n√£o encontrado")
    
    # Verificar se j√° existe uma notifica√ß√£o
    existing_notification = db.query(Notification).filter(
        Notification.user_id == user_id,
        Notification.author_id == author_id
    ).first()
    
    if acao == "seguir":
        if existing_notification:
            # Reativar se estava desativada
            db.query(Notification).filter(
                Notification.user_id == user_id,
                Notification.author_id == author_id
            ).update({"is_active": 1})
            print(f"‚úÖ Reativada notifica√ß√£o existente")
        else:
            # Criar nova notifica√ß√£o
            new_notification = Notification(
                user_id=user_id,
                author_id=author_id,
                is_active=1,
                created_at=date.today()
            )
            db.add(new_notification)
            print(f"‚úÖ Nova notifica√ß√£o criada")
        
        db.commit()
        return {"mensagem": f"Voc√™ agora est√° seguindo {author.nome} {author.sobrenome}!"}
    
    elif acao == "parar_seguir":
        if existing_notification:
            # Desativar notifica√ß√£o
            db.query(Notification).filter(
                Notification.user_id == user_id,
                Notification.author_id == author_id
            ).update({"is_active": 0})
            db.commit()
            print(f"‚úÖ Notifica√ß√£o desativada")
        
        return {"mensagem": f"Voc√™ parou de seguir {author.nome} {author.sobrenome}"}
    
    else:
        raise HTTPException(
            status_code=400, 
            detail="A√ß√£o inv√°lida. Use 'seguir' ou 'parar_seguir'"
        )

@app.get("/autores-seguidos")
def listar_autores_seguidos_auth(authorization: str = Header(None), db: Session = Depends(get_db)):
    # CORRE√á√ÉO: Usar usu√°rio logado em vez de fixo
    if not authorization:
        raise HTTPException(status_code=401, detail="Token de autentica√ß√£o necess√°rio")
    
    current_user = get_current_user_from_token(authorization, db)
    if not current_user:
        raise HTTPException(status_code=401, detail="Token inv√°lido")
    
    user_id = current_user.id  # Usar ID do usu√°rio logado
    
    notifications = db.query(Notification).filter(
        Notification.user_id == user_id,
        Notification.is_active == 1
    ).all()
    
    autores_seguidos = []
    for notif in notifications:
        author = db.query(Author).filter(Author.id == notif.author_id).first()
        if author:
            autores_seguidos.append({
                "id": author.id,
                "nome": author.nome,
                "sobrenome": author.sobrenome,
                "slug": author.slug,
                "seguindo_desde": notif.created_at
            })
    
    return {
        "total": len(autores_seguidos),
        "autores": autores_seguidos
    }


# =====================================================================
# ENDPOINTS ADMINISTRATIVOS
# =====================================================================

@app.post("/admin/enviar-notificacoes/{article_id}")
async def trigger_notifications(article_id: int, db: Session = Depends(get_db)):
    """Endpoint para disparar manualmente as notifica√ß√µes de um artigo"""
    await enviar_notificacao_novo_artigo(article_id, db)
    return {"message": "Notifica√ß√µes enviadas com sucesso"}

@app.post("/admin/test-email")
async def test_email(email_data: dict):
    """Endpoint para testar configura√ß√£o de email"""
    try:
        to_email = email_data.get("to_email", "test@example.com")
        author_name = email_data.get("author_name", "Teste Autor")
        article_title = email_data.get("article_title", "Artigo de Teste")
        event_name = email_data.get("event_name", "Evento de Teste")
        
        success = await send_notification_email(to_email, author_name, article_title, event_name)
        
        return {
            "success": success,
            "message": "Email de teste enviado com sucesso!" if success else "Falha ao enviar email de teste",
            "email_config": {
                "smtp_server": EMAIL_CONFIG["SMTP_SERVER"],
                "smtp_port": EMAIL_CONFIG["SMTP_PORT"],
                "email_from": EMAIL_CONFIG["EMAIL_FROM"],
                "configured": EMAIL_CONFIG["EMAIL_PASSWORD"] != "your_app_password"
            }
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"Erro ao testar email: {str(e)}",
            "email_config": {
                "smtp_server": EMAIL_CONFIG["SMTP_SERVER"],
                "smtp_port": EMAIL_CONFIG["SMTP_PORT"],
                "email_from": EMAIL_CONFIG["EMAIL_FROM"],
                "configured": EMAIL_CONFIG["EMAIL_PASSWORD"] != "your_app_password"
            }
        }

@app.post("/admin/setup-test-user")
async def setup_test_user(user_data: dict, db: Session = Depends(get_db)):
    """Configura um usu√°rio de teste para demonstra√ß√£o de email"""
    try:
        nome = user_data.get("nome", "Rafael")
        sobrenome = user_data.get("sobrenome", "Paniago")
        email = user_data.get("email", "rafaelpaniago@example.com")
        
        # Criar ou atualizar usu√°rio
        user = db.query(User).filter(User.email == email).first()
        if not user:
            # Criar novo usu√°rio
            import bcrypt
            senha_hash = bcrypt.hashpw("123456".encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            
            user = User(
                nome=nome,
                email=email,
                senha_hash=senha_hash,
                perfil="autor",
                receive_notifications=1
            )
            db.add(user)
            db.commit()
            db.refresh(user)
        
        # Criar ou encontrar autor correspondente
        author = db.query(Author).filter(
            Author.nome == nome, 
            Author.sobrenome == sobrenome
        ).first()
        
        if not author:
            # Criar autor
            slug = f"{nome.lower()}-{sobrenome.lower()}"
            author = Author(
                nome=nome,
                sobrenome=sobrenome,
                slug=slug
            )
            db.add(author)
            db.commit()
            db.refresh(author)
        
        return {
            "success": True,
            "user": {
                "id": user.id,
                "nome": user.nome,
                "email": user.email,
                "notificacoes": user.receive_notifications
            },
            "author": {
                "id": author.id,
                "nome": author.nome,
                "sobrenome": author.sobrenome,
                "slug": author.slug
            },
            "message": "Usu√°rio e autor de teste configurados com sucesso!"
        }
        
    except Exception as e:
        return {
            "success": False,
            "message": f"Erro ao configurar usu√°rio de teste: {str(e)}"
        }

@app.get("/admin/email-logs")
async def get_email_logs(db: Session = Depends(get_db)):
    """Consulta os logs de emails enviados"""
    try:
        logs = db.query(EmailLog).order_by(EmailLog.sent_at.desc()).limit(10).all()
        
        result = []
        for log in logs:
            # Buscar informa√ß√µes do usu√°rio e artigo
            user = db.query(User).filter(User.id == log.user_id).first()
            article = db.query(Article).filter(Article.id == log.article_id).first()
            
            result.append({
                "id": log.id,
                "user_id": log.user_id,
                "user_email": user.email if user else "N/A",
                "user_name": user.nome if user else "N/A",
                "article_id": log.article_id,
                "article_title": article.titulo if article else "N/A",
                "email_subject": log.email_subject,
                "sent_at": str(log.sent_at) if log.sent_at else None,
                "status": log.status
            })
        
        return {
            "total_logs": len(result),
            "logs": result
        }
        
    except Exception as e:
        return {
            "error": f"Erro ao consultar logs: {str(e)}"
        }

# Adicione o import do Header no topo do arquivo:
from fastapi import FastAPI, HTTPException, Depends, File, UploadFile, Form, Header

# Fun√ß√£o para extrair usu√°rio do token:
def get_current_user_from_token(authorization: str = None, db: Session = None):
    """Extrai usu√°rio atual do token de autoriza√ß√£o"""
    if not authorization or not db:
        return None
    
    try:
        # Remover "Bearer " se presente
        if authorization.startswith("Bearer "):
            authorization = authorization.replace("Bearer ", "")
        
        # Token tem formato "user_ID_hash"
        token_parts = authorization.split("_")
        if len(token_parts) >= 2 and token_parts[0] == "user":
            user_id = int(token_parts[1])
            user = db.query(User).filter(User.id == user_id).first()
            
            # Debug: Imprimir informa√ß√µes do usu√°rio
            if user:
                print(f"Usu√°rio encontrado: ID={user.id}, Nome={user.nome}, Perfil={user.perfil}")
            else:
                print(f"Usu√°rio n√£o encontrado para ID={user_id}")
            
            return user
    except Exception as e:
        print(f"Erro ao extrair usu√°rio do token: {e}")
        pass
    
    return None

# Adicione endpoint para obter dados do usu√°rio atual:
@app.get("/api/auth/me")
def get_current_user_info(authorization: str = Header(None), db: Session = Depends(get_db)):
    """Retorna informa√ß√µes do usu√°rio atual baseado no token"""
    print(f"üîç DEBUG - Authorization header recebido: {authorization}")
    
    if not authorization:
        print("‚ùå Token n√£o fornecido no header")
        raise HTTPException(status_code=401, detail="Token n√£o fornecido")
    
    user = get_current_user_from_token(authorization, db)
    if not user:
        print("‚ùå Token inv√°lido ou usu√°rio n√£o encontrado")
        raise HTTPException(status_code=401, detail="Token inv√°lido")
    
    print(f"‚úÖ Usu√°rio encontrado: {user.nome}, Perfil: {user.perfil}")
    
    return {
        "id": user.id,
        "nome": user.nome,
        "email": user.email,
        "perfil": user.perfil,
        "receive_notifications": user.receive_notifications
    }

@app.post("/admin/test-notifications/{article_id}")
async def test_notifications_for_article(article_id: int, db: Session = Depends(get_db)):
    """Endpoint para testar notifica√ß√µes de um artigo espec√≠fico"""
    try:
        print(f"üß™ Testando notifica√ß√µes para artigo ID: {article_id}")
        
        # Buscar o artigo
        article = db.query(Article).filter(Article.id == article_id).first()
        if not article:
            return {"error": f"Artigo {article_id} n√£o encontrado"}
        
        # Chamar fun√ß√£o de notifica√ß√£o
        await enviar_notificacao_novo_artigo(article_id, db)
        
        return {
            "success": True,
            "message": f"Notifica√ß√µes processadas para o artigo '{article.titulo}'",
            "article_id": article_id,
            "article_title": article.titulo
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": f"Erro ao processar notifica√ß√µes: {str(e)}"
        }

@app.get("/debug/autores")
def debug_autores(db: Session = Depends(get_db)):
    """Debug dos autores no banco de dados"""
    try:
        autores = db.query(Author).all()
        
        result = []
        for autor in autores:
            # Contar artigos do autor
            artigos_count = db.query(Article).join(Article.authors).filter(Author.id == autor.id).count()
            
            result.append({
                "id": autor.id,
                "nome": autor.nome,
                "sobrenome": autor.sobrenome,
                "slug": autor.slug,
                "artigos_count": artigos_count
            })
        
        return {
            "total_autores": len(result),
            "autores": result
        }
        
    except Exception as e:
        return {"error": f"Erro ao buscar autores: {str(e)}"}

@app.post("/admin/sync-autores")
def sync_autores_from_artigos(db: Session = Depends(get_db)):
    """Sincroniza autores baseado nos artigos existentes"""
    try:
        # Buscar todos os artigos
        artigos = db.query(Article).all()
        
        contador_sincronizados = 0
        
        for artigo in artigos:
            print(f"üìÑ Sincronizando autores do artigo: {artigo.titulo}")
            
            # Verificar se o artigo tem autores
            if not artigo.authors:
                print(f"‚ö†Ô∏è Artigo sem autores: {artigo.titulo}")
                continue
            
            for author in artigo.authors:
                print(f"üë§ Autor encontrado: {author.nome} {author.sobrenome}")
                contador_sincronizados += 1
        
        # Contar total de autores √∫nicos
        total_autores = db.query(Author).count()
        
        return {
            "message": "Sincroniza√ß√£o conclu√≠da",
            "total_autores_no_banco": total_autores,
            "autores_em_artigos": contador_sincronizados,
            "artigos_processados": len(artigos)
        }
        
    except Exception as e:
        return {"error": f"Erro na sincroniza√ß√£o: {str(e)}"}

@app.get("/admin/debug-user-notifications/{user_id}")
def debug_user_notifications(user_id: int, db: Session = Depends(get_db)):
    """Debug das notifica√ß√µes de um usu√°rio espec√≠fico"""
    try:
        # Buscar usu√°rio
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            return {"error": f"Usu√°rio {user_id} n√£o encontrado"}
        
        # Buscar notifica√ß√µes ativas
        notifications = db.query(Notification).filter(
            Notification.user_id == user_id,
            Notification.is_active == 1
        ).all()
        
        # Buscar logs de email
        email_logs = db.query(EmailLog).filter(
            EmailLog.user_id == user_id
        ).order_by(EmailLog.sent_at.desc()).limit(5).all()
        
        autores_seguidos = []
        for notif in notifications:
            author = db.query(Author).filter(Author.id == notif.author_id).first()
            if author:
                autores_seguidos.append({
                    "id": author.id,
                    "nome": f"{author.nome} {author.sobrenome}",
                    "seguindo_desde": str(notif.created_at)
                })
        
        logs_recentes = []
        for log in email_logs:
            article = db.query(Article).filter(Article.id == log.article_id).first()
            logs_recentes.append({
                "article_title": article.titulo if article else "N/A",
                "sent_at": str(log.sent_at),
                "status": log.status,
                "subject": log.email_subject
            })
        
        return {
            "user": {
                "id": user.id,
                "nome": user.nome,
                "email": user.email,
                "receive_notifications": bool(user.receive_notifications)
            },
            "autores_seguidos": autores_seguidos,
            "logs_recentes": logs_recentes,
            "total_seguindo": len(autores_seguidos)
        }
        
    except Exception as e:
        return {"error": f"Erro no debug: {str(e)}"}