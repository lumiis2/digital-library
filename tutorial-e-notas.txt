Tecnologias e conceitos utilizados

Docker: ferramenta para criar containers que isolam serviços (ex.: banco de dados). Permite rodar PostgreSQL sem instalar diretamente no sistema.

PostgreSQL: banco de dados relacional usado para armazenar informações de eventos, edições, artigos e autores.

Python: linguagem principal do backend.

SQLAlchemy: ORM (Object-Relational Mapping) que permite mapear tabelas SQL para classes Python, facilitando operações no banco.

FastAPI: framework web Python para criar APIs REST de forma rápida e com documentação automática.

Uvicorn: servidor ASGI usado para rodar a aplicação FastAPI.

python-dotenv: lê variáveis de ambiente de um arquivo .env, usado para credenciais do banco.

Git/GitHub: versionamento e colaboração do código.


Estrutura geral do projeto
tp1-engsoft/
│
├─ backend/
│   ├─ app/
│   │   ├─ main.py           # entrada da aplicação + rotas FastAPI
│   │   ├─ models.py         # definição de tabelas com SQLAlchemy
│   │   ├─ database.py       # configuração de engine, session e Base
│   │   └─ schemas.py        # schemas Pydantic (validação/serialização)
│   └─ venv/                 # ambiente virtual Python
│
├─ infra/
│   └─ docker-compose.yml    # configuração do container PostgreSQL
│
├─ frontend/ ...
├─ requirements.txt          # bibliotecas Python necessárias
└─ README.md


Como criar o banco de dados:
1. Instalar o Docker
2. Instalar o PostgreSQL via docker com docker-compose up -d
3. Abrir o terminal do Postgre com docker exec -it digital_library_db psql -U postgres
---> faça um sudo antes ou configure usuário:
     sudo groupadd docker
     sudo usermod -aG docker $USER

4. Crie a base de dados (ou importe, não sei ainda)

5. Rode o main.py com python -m app.main
Pronto seu BD e as tabelas forma criadas com sucesso! Agora vamos linkar na web e ver ser deu certo:
6. Rode o comando uvicorn app.main:app --reload
Isso vai te dar um link para um localhost onde você vai ter uma mensagem de sucesso!
Caso seu bd já tenha arquivos, nos endpoints como /arquivos já devem ter os dados...
Caso nçao tenha dados, rode o insert_example.py com python -m backend.app.insert_example


a) Banco de dados

O que foi feito:

Instalou PostgreSQL via Docker com docker-compose up -d.

Criou banco digital_library e tabelas: evento, edicao, artigo, autor, artigo_autor.

Estrutura de relações correta:

Evento 1:N Edição

Edição 1:N Artigo

Artigo N:M Autor