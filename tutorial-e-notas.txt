Tecnologias e conceitos utilizados

Docker: ferramenta para criar containers que isolam serviços (ex.: banco de dados). Permite rodar PostgreSQL sem instalar diretamente no sistema.

PostgreSQL: banco de dados relacional usado para armazenar informações de eventos, edições, artigos e autores.

Python: linguagem principal do backend.

SQLAlchemy: ORM (Object-Relational Mapping) que permite mapear tabelas SQL para classes Python, facilitando operações no banco.

FastAPI: framework web Python para criar APIs REST de forma rápida e com documentação automática.

Uvicorn: servidor ASGI usado para rodar a aplicação FastAPI.

python-dotenv: lê variáveis de ambiente de um arquivo .env, usado para credenciais do banco.

Git/GitHub: versionamento e colaboração do código.


Estrutura geral do projeto
tp1-engsoft/
│
├─ backend/
│   ├─ app/
│   │   ├─ main.py           # entrada da aplicação + rotas FastAPI
│   │   ├─ models.py         # definição de tabelas com SQLAlchemy
│   │   ├─ database.py       # configuração de engine, session e Base
│   │   └─ schemas.py        # schemas Pydantic (validação/serialização)
│   └─ venv/                 # ambiente virtual Python
│
├─ infra/
│   └─ docker-compose.yml    # configuração do container PostgreSQL
│
├─ frontend/ ...
├─ requirements.txt          # bibliotecas Python necessárias
└─ README.md


# TUTORIAL BACKEND E BANCO DE DADOS
1. Instalar o Docker:
sudo apt update
sudo apt install docker.io -y
sudo systemctl enable --now docker
sudo apt install docker-compose -y

docker --version
docker-compose --version

2. Configure seu usuário:
sudo groupadd docker
sudo usermod -aG docker $USER

3. Coloque o PostgreSQL para funcionar via docker com
cd infra
docker-compose up -d

3.1. Teste se deu certo com `docker ps`
3.2. caso queria, para rodar comando SQL na base de dados, abrir o terminal do Postgre com `docker exec -it digital_library_db psql -U postgres`

4. Crie seu venv e baixe os requirements:
python3 -m venv venv
source venv/bin/activate
pip install -r backend/requirements.txt

5. Crie as tabelas com
cd backend
python3 -m app.main

6. Adicione dados nas tabelas com 
python insert_example.py de dentro de backend/app/ OU
python -m backend.app.insert_example`

Pronto seu BD e as tabelas forma criadas com sucesso! Agora vamos linkar na web e ver ser deu certo:

7. Rode o comando uvicorn app.main:app --reload

Isso vai te dar um link para um localhost onde você vai ter uma mensagem de sucesso!
Caso seu bd já tenha arquivos, nos endpoints como `localhost.../arquivos` já devem ter os dados (IMPORTANTE FUNCIONAR)


a) Banco de dados

O que foi feito:

Instalou PostgreSQL via Docker com docker-compose up -d.

Criou banco digital_library e tabelas: evento, edicao, artigo, autor, artigo_autor.

Estrutura de relações correta:

Evento 1:N Edição

Edição 1:N Artigo

Artigo N:M Autor


# TUTORIAL FRONTEND

1. Baixe o React e o Routes
npm install react
npm install react-router-dom

2. Baixe o Tailwindcss
npm install -D tailwindcss
- talvez precise instalar postcss autoprefixer

3. Inicie
npx tailwindcss init -p
- here you are supposed to now have tailwind.config.js and postcss.config.js files created (you already have this seted up)
- you can also check where is it donloaded with '' npm list tailwindcss ''

4. Rode o frontend
npm start